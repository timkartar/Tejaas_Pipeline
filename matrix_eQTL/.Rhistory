source("main.R -g /usr/users/fsimone/datasets/gtex/GTEx_450Indiv_genot_imput_info04_maf01_HWEp1E6_dbSNP135IDs_donorIDs_dosage_chr22.gz -d /usr/users/fsimone/datasets/gtex/donor_ids.fam -s gtex -x /usr/users/fsimone/datasets/gtex/Whole_Blood_Analysis.v6p.normalized.expression.txt -o /usr/users/fsimone/pipeline/gtex_results -i /usr/users/fsimone/datasets/gtex/genepos.gencode.v19.txt")
system("main.R -g /usr/users/fsimone/datasets/gtex/GTEx_450Indiv_genot_imput_info04_maf01_HWEp1E6_dbSNP135IDs_donorIDs_dosage_chr22.gz -d /usr/users/fsimone/datasets/gtex/donor_ids.fam -s gtex -x /usr/users/fsimone/datasets/gtex/Whole_Blood_Analysis.v6p.normalized.expression.txt -o /usr/users/fsimone/pipeline/gtex_results -i /usr/users/fsimone/datasets/gtex/genepos.gencode.v19.txt")
library("optparse")
# source("Matrix_eQTL_R/Matrix_eQTL_engine.r");
library(MatrixEQTL)
 
option_list = list(
    make_option(c("-g", "--genotype"), type="character", default=NULL, 
              help="path to genotype file name", metavar="character"),
    make_option(c("-d", "--donors"), type="character", default=NULL, 
              help="path to donor ids file name", metavar="character"),
    make_option(c("-i", "--geneinfo"), type="character", default=NULL, 
              help="path to gene info file name", metavar="character"),
    make_option(c("-s", "--dataset"), type="character", default=NULL, 
              help="dataset to process [gtex, cardiogenics]", metavar="character"),
    make_option(c("-x", "--expression"), type="character", default=NULL, 
              help="path to gene expression file name", metavar="character"),
    make_option(c("-p", "--pvalcis"), type="numeric", default=1e-3, 
              help="pvalue threshold for cis eQTLs [default= %default]", metavar="number"),
    make_option(c("-t", "--pvaltrans"), type="numeric", default=1e-3, 
              help="pvalue threshold for cis eQTLs [default= %default]", metavar="number"),
    make_option(c("-o", "--outdir"), type="character", default=".", 
              help="path to output directory [default \"%default\"]", metavar="character"),
    make_option(c("-m", "--model"), type="character", default="modelLINEAR", 
              help="Model to use from modelANOVA, modelLINEAR, or modelLINEAR_CROSS [default \"%default\"]", metavar="character")
); 
 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
opt$genotype   ="/usr/users/fsimone/datasets/gtex/GTEx_450Indiv_genot_imput_info04_maf01_HWEp1E6_dbSNP135IDs_donorIDs_dosage_chr22.gz"
opt$donors     ="/usr/users/fsimone/datasets/gtex/donor_ids.fam"
opt$dataset    ="gtex"
opt$expression ="/usr/users/fsimone/datasets/gtex/Whole_Blood_Analysis.v6p.normalized.expression.txt"
opt$outdir     ="/usr/users/fsimone/pipeline/gtex_results"
opt$geneinfo   ="/usr/users/fsimone/datasets/gtex/genepos.gencode.v19.txt"
if (is.null(opt$genotype) | is.null(opt$expression) | is.null(opt$dataset) | is.null(opt$geneinfo)){
  print_help(opt_parser)
  stop("Mandatory arguments missing.n", call.=FALSE)
}
if (opt$dataset!="gtex" & opt$dataset!="cardiogenics") {
    print_help(opt_parser)
    stop(paste("Available datasets are \"gtex\", \"cardiogenics\". Input is: ", opt$dataset, sep=""))
}
# Linear model to use, modelANOVA, modelLINEAR, or modelLINEAR_CROSS
if (opt$model == "modelLINEAR")
    {useModel = modelLINEAR;}
if (opt$model == "modelLINEAR")
    {useModel = modelLINEAR;}
if (opt$model == "modelLINEAR")
    {useModel = modelLINEAR;
} else { stop("Invalid model selection, must be one of modelANOVA, modelLINEAR, or modelLINEAR_CROSS") }
if(is.null(opt$geneinfo))
{
    stop("Gene info file is missing");    
} else {
    genepos = read.table(opt$geneinfo, header = TRUE, stringsAsFactors = FALSE);        
}
# Genotype file name
SNP_file_name = opt$genotype;
donors_file_name = opt$donors;
# Gene expression file name
expression_file_name = opt$expression;
# Covariates file name
# Set to character() for no covariates
if (is.null(opt$covariates)) {
    cvrt = SlicedData$new();
} else {
    ## Load covariates
    cvrt = SlicedData$new();
    cvrt$fileDelimiter = "\t";      # the TAB character
    cvrt$fileOmitCharacters = "NA"; # denote missing values;
    cvrt$fileSkipRows = 1;          # one row of column labels
    cvrt$fileSkipColumns = 1;       # one column of row labels
    if(length(covariates_file_name)>0) {
    cvrt$LoadFile(opt$covariates);
    }
}
# Output file name
output_file_name_cis = paste(opt$outdir, "/",opt$dataset, "_MatrixEQTL.cisout", sep="");
output_file_name_tra = paste(opt$outdir, "/",opt$dataset, "_MatrixEQTL.transout", sep="");
dir.create(file.path(opt$outdir), showWarnings = FALSE)
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 1e-3;
pvOutputThreshold_tra = 1e-3;
# Distance for local gene-SNP pairs
cisDist = 1e6;
# Error covariance matrix
# Set to numeric() for identity.
errorCovariance = numeric();
# errorCovariance = read.table("Sample_Data/errorCovariance.txt");
## Load genotype data
snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
row_names = snps_mat[1:100,2]
donor_ids = read.csv(file=donors_file_name, sep=" ", stringsAsFactors=F, header=F)[,1]
# get SNPs positions for cis and trans analysis (before cropping the snp matrix)
snpspos = snps_mat[,c(2,1,3)]
snpspos[,2] = paste("chr", snpspos[,2], sep="")
colnames(snpspos) = c("snpid","chr","pos")
# crop matrix for genotypes only
snps_mat = snps_mat[1:100,7:ncol(snps_mat)]
rownames(snps_mat) = row_names
colnames(snps_mat) = donor_ids
snps_mat = as.matrix(snps_mat)
snps = SlicedData$new();
snps$fileSliceSize = 2000;      # read file in slices of 2,000 rows
snps$CreateFromMatrix( snps_mat ) 
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t";      # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1;          # one row of column labels
gene$fileSkipColumns = 1;       # one column of row labels
gene$fileSliceSize = 2000;      # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
# match columns of samples
col_index = match(colnames(gene), colnames(snps)) 
if (all(colnames(snps)[col_index] == colnames(gene))) {
    snps$ColumnSubsample(col_index)    
}
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
cvrt = cvrt, 
output_file_name = output_file_name_tra,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = useModel, 
errorCovariance = errorCovariance, 
verbose = TRUE,
cisDist = cisDist,
snpspos = snpspos, 
genepos = genepos,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE);
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat(paste('Detected eQTLs:', numeric(me$all$neqtls) '\n', sep=""));
me$all$neqtls
me$all$neqtls[0]
me$all$neqtls
paste('Detected eQTLs:', numeric(me$all$neqtls) '\n', sep="");
paste('Detected eQTLs:', me$all$neqtls, '\n', sep="");
cat(paste('Detected eQTLs:', me$all$neqtls, '\n', sep=""));
snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
snps_mat[1:10,1:10]
# crop matrix for genotypes only
readGTEX<-function(SNP_file_name, donors_file_name) {
    snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
    row_names = snps_mat[,2]
    donor_ids = read.csv(file=donors_file_name, sep=" ", stringsAsFactors=F, header=F)[,1]
    # get SNPs positions for cis and trans analysis (before cropping the snp matrix)
    snpspos = snps_mat[,c(2,1,3)]
    snpspos[,2] = paste("chr", snpspos[,2], sep="")
    colnames(snpspos) = c("snpid","chr","pos")
    maf = snps_mat[,6]
    snps_mat = snps_mat[,7:ncol(snps_mat)]
    rownames(snps_mat) = row_names
    colnames(snps_mat) = donor_ids
    snps_mat = as.matrix(snps_mat)
    return(list(snps_mat, snpspos))
}
readGTEX(SNP_file_name, donors_file_name)
res = readGTEX(SNP_file_name, donors_file_name)
apply(res, 1, dim)
sapply(res, dim)
mimat = res[[1]]
dim(mimat)
mimat[1:10,1:10]
otr = res[2]
otr
otr = res[[2]]
otr
dim(me)
me
me$all$eqtls
head(me$all$eqtls)
me$all$neqtls
1/3212
6.0925-12 / 3212
6.0925e-12
6.0925e-12 / 3212
6.0925e-12 * 3212
1/3212
1.4105e-06/3212
1.4105e-05/3212
dim(me$all$eqtls)
1/3212
(1/3212)*0.05
(1/3212)/1.4105e-5
(1.410547e-5)/3212
(1.410547e-5)*3212
me$all$ntests
head(me$all$eqtls)
1/2315200
(1/2315200)*6.092545e-12
(2315200)*6.092545e-12
(2315200*2)*2.432658e-9
(2315200)*2.432658e-9
(2315200/2)*2.432658e-9
tail(me$all$eqtls)
opt$genotype   ="/usr/users/fsimone/datasets/cardiogenics/genotypes/CG_22.imputed.gz"
# Genotype file name
SNP_file_name = opt$genotype;
donors_file_name = opt$donors;# Genotype file name
SNP_file_name = opt$genotype;
donors_file_name = opt$donors;
snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
snps_mat[1:10,1:10]
chrom = 22
paste("chr", chrom, sep="")
rep(paste("chr", chrom, sep=""), 10)
snpspos = snps_mat[,c(2,1,3)]
head(snpspos)
snpspos[,2] = rep(paste("chr", chrom, sep=""), nrow(snpspos))
head(snpspos)
colnames(snpspos) = c("snpid","chr","pos")        
seq(1,ncol(snps_mat))
snps_mat[1:10,1:10]
snps_mat_gt = snps_mat[,6:ncol(snps_mat)]
snps_mat_gt[1:10,1:10]
dim(snps_mat_gt)
2358/3
seq(1, ncol(snps_mat_gt), 3)
AAindex = seq(1, ncol(snps_mat_gt),3)
    ABindex = seq(2, ncol(snps_mat_gt),3)
    BBindex = seq(3, ncol(snps_mat_gt),3)
AAindex
BBindex
ABindex
snps_mat_gt[,AAindex]
head(snps_mat_gt[,AAindex])
dosages = snps_mat_gt[,ABindex] + 2*snps_mat_gt[,BBindex] 
dim(dosages)
dim(snps_mat_gt)
dosages[1:10,1:10]
snps_mat_gt[1:10,1:10]
0.173+2*0.02
0.173+2*0.002
0.018readOxford<-function(SNP_file_name, donors_file_name, chrom) {
    snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
readOxford<-function(SNP_file_name, donors_file_name, chrom) {
    snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
    row_names = snps_mat[,2]
    donor_ids = read.csv(file=donors_file_name, sep=" ", stringsAsFactors=F, header=F)[,1]
    snpspos = snps_mat[,c(2,1,3)]
    snpspos[,2] = rep(paste("chr", chrom, sep=""), nrow(snpspos))
    colnames(snpspos) = c("snpid","chr","pos")
    snps_mat_gt = snps_mat[,6:ncol(snps_mat)]
    AAindex = seq(1, ncol(snps_mat_gt),3)
    ABindex = seq(2, ncol(snps_mat_gt),3)
    BBindex = seq(3, ncol(snps_mat_gt),3)
    dosages_mat = snps_mat_gt[,ABindex] + 2*snps_mat_gt[,BBindex] 
    rownames(dosages_mat) = row_names
    colnames(dosages_mat) = col_names
    dosages_mat = as.matrix(snps_mat)
    return(list(dosages_mat, snpspos))
}
SNP_file_name
SNP_file_name
opt$genotype   ="/usr/users/fsimone/datasets/cardiogenics/genotypes/CG_22.imputed.gz"
opt$donors     ="/usr/users/fsimone/datasets/cardiogenics/genotypes/CG.sample"
donors_file_name = opt$donors;
res = readOxford(SNP_file_name, donors_file_name)
opt$genotype   ="/usr/users/fsimone/datasets/gtex/GTEx_450Indiv_genot_imput_info04_maf01_HWEp1E6_dbSNP135IDs_donorIDs_dosage_chr22.gz"
res = readOxford(SNP_file_name, donors_file_name, chrom)
chrom=22
res = readOxford(SNP_file_name, donors_file_name, chrom)
readOxford<-function(SNP_file_name, donors_file_name, chrom, maf_filter=T, maf=0.05) {
    snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
    row_names = snps_mat[,2]
    donor_ids = read.csv(file=donors_file_name, sep=" ", stringsAsFactors=F, header=F)[,1]
    snpspos = snps_mat[,c(2,1,3)]
    snpspos[,2] = rep(paste("chr", chrom, sep=""), nrow(snpspos))
    colnames(snpspos) = c("snpid","chr","pos")
    snps_mat_gt = snps_mat[,6:ncol(snps_mat)]
    AAindex = seq(1, ncol(snps_mat_gt),3)
    ABindex = seq(2, ncol(snps_mat_gt),3)
    BBindex = seq(3, ncol(snps_mat_gt),3)
    dosages_mat = snps_mat_gt[,ABindex] + 2*snps_mat_gt[,BBindex] 
    rownames(dosages_mat) = row_names
    colnames(snps_mat) = donor_ids
    dosages_mat = as.matrix(snps_mat)
    return(list(dosages_mat, snpspos))
}
res = readOxford(SNP_file_name, donors_file_name, chrom)
dim(res[[1]])
dim(res[[2]])
dim(dosages_mat)
   message("Reading Genotype ...")
    snps_mat = read.csv(file=SNP_file_name, sep=" ", stringsAsFactors=F, header=F)
    row_names = snps_mat[,2]
    donor_ids = read.csv(file=donors_file_name, sep=" ", stringsAsFactors=F, header=F)[,1]
    snpspos = snps_mat[,c(2,1,3)]
    snpspos[,2] = rep(paste("chr", chrom, sep=""), nrow(snpspos))
    colnames(snpspos) = c("snpid","chr","pos")
    snps_mat_gt = snps_mat[,6:ncol(snps_mat)]
    AAindex = seq(1, ncol(snps_mat_gt),3)
    ABindex = seq(2, ncol(snps_mat_gt),3)
    BBindex = seq(3, ncol(snps_mat_gt),3)
    dosages_mat = snps_mat_gt[,ABindex] + 2*snps_mat_gt[,BBindex] 
    rownames(dosages_mat) = row_names
    colnames(snps_mat) = donor_ids
maf = apply(dosages_mat,0,sum) / 2 / len(snp_dosage)
apply(dosages_mat,0,sum)
dim(dosages_mat)
sumas = apply(dosages_mat, 1, sum)
dim(sumas)
length(sumas)
head(sumas)
mafs = sumas / 2
mafs = mafs / ncol(dosages_mat)
head(mafs)
maf_thres = 0.05
    mafs > maf_thres
mafs2remove = mafs < maf_thres
which(mafs2remove)
mafs2remove
maf_thres
mafs
dim(dosages_mat)
sum(mafs2remove)
mafs2remove = mafs < maf_thres | mafs > (1-maf_thres)
sum(mafs2remove)
